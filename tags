!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(LIBFT)	Makefile	/^$(LIBFT):$/;"	t
$(NAME)	Makefile	/^$(NAME): ${OBJS} ${LIBFT}$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): ${OBJS}$/;"	t
.c.o	Makefile	/^.c.o:$/;"	t
.c.o	libft/Makefile	/^.c.o:$/;"	t
42cursus_push_swap	README.md	/^# 42cursus_push_swap$/;"	c
BONUS	Makefile	/^BONUS = checker$/;"	m
BONUS	libft/Makefile	/^BONUS = ft_lstnew.c ft_lstadd_front.c ft_lstadd_back.c ft_lstdelone.c ft_lstclear.c ft_lstiter.c/;"	m
BONUS_OBJS	Makefile	/^BONUS_OBJS = ${BONUS_SRC:.c=.o}$/;"	m
BONUS_SRC	Makefile	/^BONUS_SRC = main_bonus.c exec_operations_bonus.c operations_bonus.c struct_fields_bonus.c struct/;"	m
BUFFER_SIZE	libft/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = cc -g$/;"	m
CC	libft/Makefile	/^CC = cc -g$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
EXTRA	libft/Makefile	/^EXTRA = ft_putnbr_base_fd.c ft_printf.c get_next_line.c get_next_line_utils.c free_array_of_stri/;"	m
INCLUDE	Makefile	/^INCLUDE = -I .$/;"	m
INCLUDE	libft/Makefile	/^INCLUDE = -I .$/;"	m
LIBFT	Makefile	/^LIBFT = ${LIBFT_PATH}\/libft.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_PATH	Makefile	/^LIBFT_PATH = libft$/;"	m
MAKE	Makefile	/^MAKE = make -C$/;"	m
NAME	Makefile	/^NAME = push_swap$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = ${SRC:.c=.o}$/;"	m
OBJS	libft/Makefile	/^OBJS = ${SRC:.c=.o}$/;"	m
PART1	libft/Makefile	/^PART1 = ft_tolower.c ft_toupper.c ft_isprint.c ft_isascii.c ft_isalnum.c ft_isdigit.c ft_isalpha/;"	m
PART2	libft/Makefile	/^PART2 = ft_itoa.c ft_strjoin.c ft_split.c ft_striteri.c ft_strmapi.c ft_substr.c ft_strtrim.c ft/;"	m
PUSH_SWAP_BONUS_H	push_swap_bonus.h	/^# define PUSH_SWAP_BONUS_H$/;"	d
PUSH_SWAP_H	push_swap.h	/^# define PUSH_SWAP_H$/;"	d
RM	Makefile	/^RM = rm -f$/;"	m
RM	libft/Makefile	/^RM = rm -f$/;"	m
SRC	Makefile	/^SRC = main.c operations.c exec_operations.c sort.c struct_fields.c lst_utils.c struct_fields_uti/;"	m
SRC	libft/Makefile	/^SRC = ${PART1} ${PART2} ${BONUS} ${EXTRA}$/;"	m
algcounter	libft/ft_itoa.c	/^int	algcounter(int n)$/;"	f	typeref:typename:int
all	Makefile	/^all: ${NAME}$/;"	t
all	libft/Makefile	/^all:	${NAME}$/;"	t
arg_checker	main.c	/^static int	arg_checker(int argc, char **args)$/;"	f	typeref:typename:int	file:
arg_checker	main_bonus.c	/^static int	arg_checker(int argc, char **args)$/;"	f	typeref:typename:int	file:
bigger	libft/int_size_utils.c	/^int	bigger(int a, int b)$/;"	f	typeref:typename:int
biggest	lst_utils.c	/^t_list	*biggest(t_list *stack)$/;"	f	typeref:typename:t_list *
biggest	lst_utils_bonus.c	/^t_list	*biggest(t_list *stack)$/;"	f	typeref:typename:t_list *
bonus	Makefile	/^bonus: ${BONUS_OBJS} ${LIBFT}$/;"	t
checktype	libft/ft_printf.c	/^int	checktype(int ch, va_list args)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
clean_stash	libft/get_next_line.c	/^static char	*clean_stash(char *stash)$/;"	f	typeref:typename:char *	file:
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
exec_cheapest	exec_operations.c	/^void	exec_cheapest(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
exec_cheapest	exec_operations_bonus.c	/^void	exec_cheapest(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
exec_cheapest_aux1	exec_operations_extra.c	/^int	exec_cheapest_aux1(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux1	exec_operations_extra_bonus.c	/^int	exec_cheapest_aux1(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux2	exec_operations_extra.c	/^int	exec_cheapest_aux2(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux2	exec_operations_extra_bonus.c	/^int	exec_cheapest_aux2(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux3	exec_operations_extra.c	/^int	exec_cheapest_aux3(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux3	exec_operations_extra_bonus.c	/^int	exec_cheapest_aux3(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux4	exec_operations_extra.c	/^int	exec_cheapest_aux4(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux4	exec_operations_extra_bonus.c	/^int	exec_cheapest_aux4(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux5	exec_operations_extra.c	/^int	exec_cheapest_aux5(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux5	exec_operations_extra_bonus.c	/^int	exec_cheapest_aux5(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux6	exec_operations_extra1.c	/^int	exec_cheapest_aux6(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux6	exec_operations_extra1_bonus.c	/^int	exec_cheapest_aux6(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux7	exec_operations_extra1.c	/^int	exec_cheapest_aux7(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_aux7	exec_operations_extra1_bonus.c	/^int	exec_cheapest_aux7(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_extra	exec_operations.c	/^int	exec_cheapest_extra(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_cheapest_extra	exec_operations_bonus.c	/^int	exec_cheapest_extra(t_list **stack_a, t_list **stack_b, t_node *node)$/;"	f	typeref:typename:int
exec_operation	exec_operations.c	/^void	exec_operation(t_list **stack_a, t_list **stack_b, char *line)$/;"	f	typeref:typename:void
exec_operation	exec_operations_bonus.c	/^void	exec_operation(t_list **stack_a, t_list **stack_b, char *line)$/;"	f	typeref:typename:void
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
fill_stack	main.c	/^static t_list	*fill_stack(t_list **stack_a, char **args, int i)$/;"	f	typeref:typename:t_list *	file:
fill_stack	main_bonus.c	/^static t_list	*fill_stack(t_list **stack_a, char **args, int i)$/;"	f	typeref:typename:t_list *	file:
final_a_index	push_swap.h	/^	int	final_a_index;$/;"	m	struct:s_node	typeref:typename:int
final_a_index	push_swap_bonus.h	/^	int	final_a_index;$/;"	m	struct:s_node	typeref:typename:int
free_array_of_strings	libft/free_array_of_strings.c	/^void	free_array_of_strings(char **str)$/;"	f	typeref:typename:void
ft_abs_value	libft/ft_abs_value.c	/^int	ft_abs_value(int n)$/;"	f	typeref:typename:int
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_atol	libft/ft_atol.c	/^long long	ft_atol(const char *nptr)$/;"	f	typeref:typename:long long
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *b, size_t len)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t number, size_t size)$/;"	f	typeref:typename:void *
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *novel)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *novel)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **head, t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_matrixlen	libft/ft_matrixlen.c	/^int	ft_matrixlen(void **matrix)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *b1, const void *b2, size_t len)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *dest, int c, size_t len)$/;"	f	typeref:typename:void *
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^int	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:int
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_base_fd	libft/ft_putnbr_base_fd.c	/^int	ft_putnbr_base_fd(unsigned long decimal, char *base, int fd)$/;"	f	typeref:typename:int
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^int	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:int
ft_putstr_fd	libft/ft_putstr_fd.c	/^int	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:int
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_splitquote	libft/ft_splitquote.c	/^char	**ft_splitquote(char *s, char c)$/;"	f	typeref:typename:char **
ft_splitquote_nulls	libft/quotes_utils.c	/^char	**ft_splitquote_nulls(char *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strchrnum	libft/get_next_line_utils.c	/^int	ft_strchrnum(const char *s, int c)$/;"	f	typeref:typename:int
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *str1, const char *str2)$/;"	f	typeref:typename:int
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strjoinfree	libft/get_next_line_utils.c	/^char	*ft_strjoinfree(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t len)$/;"	f	typeref:typename:int
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
get_line	libft/get_next_line.c	/^static char	*get_line(char *stash)$/;"	f	typeref:typename:char *	file:
get_next_line	libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_stash	libft/get_next_line.c	/^static char	*get_stash(int fd, char *stash)$/;"	f	typeref:typename:char *	file:
half	push_swap.h	/^	int	half;$/;"	m	struct:s_node	typeref:typename:int
half	push_swap_bonus.h	/^	int	half;$/;"	m	struct:s_node	typeref:typename:int
index	push_swap.h	/^	int	index;$/;"	m	struct:s_node	typeref:typename:int
index	push_swap_bonus.h	/^	int	index;$/;"	m	struct:s_node	typeref:typename:int
inquote	libft/quotes.c	/^char	inquote(char *s, int index)$/;"	f	typeref:typename:char
inverted_index	push_swap.h	/^	int	inverted_index;$/;"	m	struct:s_node	typeref:typename:int
inverted_index	push_swap_bonus.h	/^	int	inverted_index;$/;"	m	struct:s_node	typeref:typename:int
is_beginning_quote	libft/quotes.c	/^int	is_beginning_quote(char *s, int index)$/;"	f	typeref:typename:int
is_beginning_wordquote	libft/quotes_utils.c	/^int	is_beginning_wordquote(char *s, int index, char c)$/;"	f	typeref:typename:int
is_end_quote	libft/quotes.c	/^int	is_end_quote(char *s, int index)$/;"	f	typeref:typename:int
is_end_wordquote	libft/quotes_utils.c	/^int	is_end_wordquote(char *s, int index, char c)$/;"	f	typeref:typename:int
is_organized	main.c	/^int	is_organized(t_list *node, int bigger_final_index,$/;"	f	typeref:typename:int
is_organized	main_bonus.c	/^int	is_organized(t_list *node, int bigger_final_index,$/;"	f	typeref:typename:int
is_sorted	main.c	/^int	is_sorted(t_list *node)$/;"	f	typeref:typename:int
is_sorted	main_bonus.c	/^int	is_sorted(t_list *node)$/;"	f	typeref:typename:int
isneg	libft/ft_itoa.c	/^char	*isneg(int algcount, int n)$/;"	f	typeref:typename:char *
isquote	libft/quotes.c	/^char	isquote(char *s, int index)$/;"	f	typeref:typename:char
lowest_price_index	calculators.c	/^int	lowest_price_index(t_list *stack_b)$/;"	f	typeref:typename:int
lowest_price_index	calculators_bonus.c	/^int	lowest_price_index(t_list *stack_b)$/;"	f	typeref:typename:int
main	main.c	/^int	main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	main_bonus.c	/^int	main(int argc, char *argv[])$/;"	f	typeref:typename:int
module	libft/ft_itoa.c	/^long int	module(int n)$/;"	f	typeref:typename:long int
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
operations_aux	exec_operations.c	/^void	operations_aux(t_list **stack_a, t_list **stack_b, char *line)$/;"	f	typeref:typename:void
operations_aux	exec_operations_bonus.c	/^void	operations_aux(t_list **stack_a, t_list **stack_b, char *line)$/;"	f	typeref:typename:void
prev	libft/libft.h	/^	struct s_list	*prev;$/;"	m	struct:s_list	typeref:struct:s_list *
price	push_swap.h	/^	int	price;$/;"	m	struct:s_node	typeref:typename:int
price	push_swap_bonus.h	/^	int	price;$/;"	m	struct:s_node	typeref:typename:int
push	operations.c	/^void	push(t_list **stack_orig, t_list **stack_dest)$/;"	f	typeref:typename:void
push	operations_bonus.c	/^void	push(t_list **stack_orig, t_list **stack_dest)$/;"	f	typeref:typename:void
quote	libft/quotes.c	/^char	quote(char *s, int index)$/;"	f	typeref:typename:char
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
read_line	read_utils_bonus.c	/^void	read_line(t_list **a, t_list **b, char *line)$/;"	f	typeref:typename:void
reverse_rotate	operations.c	/^void	reverse_rotate(t_list **stack)$/;"	f	typeref:typename:void
reverse_rotate	operations_bonus.c	/^void	reverse_rotate(t_list **stack)$/;"	f	typeref:typename:void
rotate	operations.c	/^void	rotate(t_list **stack)$/;"	f	typeref:typename:void
rotate	operations_bonus.c	/^void	rotate(t_list **stack)$/;"	f	typeref:typename:void
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_node	push_swap.h	/^typedef struct s_node$/;"	s
s_node	push_swap_bonus.h	/^typedef struct s_node$/;"	s
set_final_a_index	struct_fields.c	/^void	set_final_a_index(t_list **stack_a)$/;"	f	typeref:typename:void
set_final_a_index	struct_fields_bonus.c	/^void	set_final_a_index(t_list **stack_a)$/;"	f	typeref:typename:void
set_half	struct_fields.c	/^void	set_half(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_half	struct_fields_bonus.c	/^void	set_half(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_half_for_stack	struct_fields_extra.c	/^void	set_half_for_stack(t_list **stack)$/;"	f	typeref:typename:void
set_half_for_stack	struct_fields_extra_bonus.c	/^void	set_half_for_stack(t_list **stack)$/;"	f	typeref:typename:void
set_index	struct_fields.c	/^void	set_index(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_index	struct_fields_bonus.c	/^void	set_index(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_init_node_values	struct_fields.c	/^void	set_init_node_values(t_node *node, char **args, int i)$/;"	f	typeref:typename:void
set_init_node_values	struct_fields_bonus.c	/^void	set_init_node_values(t_node *node, char **args, int i)$/;"	f	typeref:typename:void
set_inverse_index	struct_fields_utils.c	/^void	set_inverse_index(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_inverse_index	struct_fields_utils_bonus.c	/^void	set_inverse_index(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_median	calculators.c	/^int	set_median(t_list *stack_a)$/;"	f	typeref:typename:int
set_median	calculators_bonus.c	/^int	set_median(t_list *stack_a)$/;"	f	typeref:typename:int
set_price	struct_fields.c	/^void	set_price(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_price	struct_fields_bonus.c	/^void	set_price(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_price_extra	struct_fields_extra.c	/^void	set_price_extra(t_list **stack_a, t_node *node)$/;"	f	typeref:typename:void
set_price_extra	struct_fields_extra_bonus.c	/^void	set_price_extra(t_list **stack_a, t_node *node)$/;"	f	typeref:typename:void
set_price_stack_a	struct_fields_extra.c	/^void	set_price_stack_a(t_list **stack_a)$/;"	f	typeref:typename:void
set_price_stack_a	struct_fields_extra_bonus.c	/^void	set_price_stack_a(t_list **stack_a)$/;"	f	typeref:typename:void
set_values	struct_fields_utils.c	/^void	set_values(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
set_values	struct_fields_utils_bonus.c	/^void	set_values(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
smaller	libft/int_size_utils.c	/^int	smaller(int a, int b)$/;"	f	typeref:typename:int
smallest	lst_utils.c	/^t_list	*smallest(t_list *stack)$/;"	f	typeref:typename:t_list *
smallest	lst_utils_bonus.c	/^t_list	*smallest(t_list *stack)$/;"	f	typeref:typename:t_list *
sort	sort.c	/^void	sort(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort	sort_bonus.c	/^void	sort(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_four_and_five	sort.c	/^void	sort_four_and_five(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_four_and_five	sort_bonus.c	/^void	sort_four_and_five(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_four_and_five_extra	sort_extra.c	/^void	sort_four_and_five_extra(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_four_and_five_extra	sort_extra_bonus.c	/^void	sort_four_and_five_extra(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_many	sort.c	/^void	sort_many(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_many	sort_bonus.c	/^void	sort_many(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_many_extra	sort_extra.c	/^void	sort_many_extra(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_many_extra	sort_extra_bonus.c	/^void	sort_many_extra(t_list **stack_a, t_list **stack_b)$/;"	f	typeref:typename:void
sort_organized	lst_utils.c	/^void	sort_organized(t_list **stack_a)$/;"	f	typeref:typename:void
sort_organized	lst_utils_bonus.c	/^void	sort_organized(t_list **stack_a)$/;"	f	typeref:typename:void
sort_organized_price	lst_utils.c	/^int	sort_organized_price(t_list *stack)$/;"	f	typeref:typename:int
sort_organized_price	lst_utils_bonus.c	/^int	sort_organized_price(t_list *stack)$/;"	f	typeref:typename:int
sort_three	sort.c	/^void	sort_three(t_list **stack_a)$/;"	f	typeref:typename:void
sort_three	sort_bonus.c	/^void	sort_three(t_list **stack_a)$/;"	f	typeref:typename:void
strfiller	libft/ft_split.c	/^static void	strfiller(char *s, char **str, char c)$/;"	f	typeref:typename:void	file:
strfiller	libft/ft_splitquote.c	/^static void	strfiller(char *s, char **str, char c)$/;"	f	typeref:typename:void	file:
strmalloc	libft/ft_split.c	/^static void	strmalloc(int *j, char ***str, int *k)$/;"	f	typeref:typename:void	file:
strmalloc	libft/ft_splitquote.c	/^static void	strmalloc(int *j, char ***str, int *k)$/;"	f	typeref:typename:void	file:
swap	operations.c	/^void	swap(t_list **stack)$/;"	f	typeref:typename:void
swap	operations_bonus.c	/^void	swap(t_list **stack)$/;"	f	typeref:typename:void
t_list	libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_node	push_swap.h	/^}		t_node;$/;"	t	typeref:struct:s_node
t_node	push_swap_bonus.h	/^}		t_node;$/;"	t	typeref:struct:s_node
target_half	calculators.c	/^int	target_half(t_list *stack_a, int src_final_index)$/;"	f	typeref:typename:int
target_half	calculators_bonus.c	/^int	target_half(t_list *stack_a, int src_final_index)$/;"	f	typeref:typename:int
target_index	calculators.c	/^int	target_index(t_list *stack_a, int src_final_index)$/;"	f	typeref:typename:int
target_index	calculators_bonus.c	/^int	target_index(t_list *stack_a, int src_final_index)$/;"	f	typeref:typename:int
target_inverse_index	calculators.c	/^int	target_inverse_index(t_list *stack_a, int src_final_index)$/;"	f	typeref:typename:int
target_inverse_index	calculators_bonus.c	/^int	target_inverse_index(t_list *stack_a, int src_final_index)$/;"	f	typeref:typename:int
typeconversor1	libft/ft_printf.c	/^int	typeconversor1(char ch, va_list args)$/;"	f	typeref:typename:int
typeconversor2	libft/ft_printf.c	/^int	typeconversor2(char ch, va_list args)$/;"	f	typeref:typename:int
value	push_swap.h	/^	int	value;$/;"	m	struct:s_node	typeref:typename:int
value	push_swap_bonus.h	/^	int	value;$/;"	m	struct:s_node	typeref:typename:int
wordcounter	libft/ft_split.c	/^static int	wordcounter(char const *s, char c)$/;"	f	typeref:typename:int	file:
wordcounter	libft/ft_splitquote.c	/^static int	wordcounter(char *s, char c)$/;"	f	typeref:typename:int	file:
wordfiller	libft/ft_split.c	/^static void	wordfiller(char *j, char *str, char c)$/;"	f	typeref:typename:void	file:
wordfiller	libft/ft_splitquote.c	/^static void	wordfiller(char *j, char *str, char c)$/;"	f	typeref:typename:void	file:
wrong_args	lst_utils.c	/^void	wrong_args(void)$/;"	f	typeref:typename:void
wrong_args	lst_utils_bonus.c	/^void	wrong_args(t_list *a, t_list *b, char *line)$/;"	f	typeref:typename:void
